#!/bin/sh

err() { [ "$DEV_SUPRESS_ERRORS" = 1 ] ||
	printf "dev: %s\n" "$@" >&2; exit 5; }

[ "$#" -lt 2 ] && { err "dev - execute action based on file
USAGE: dev <ACTION> <FILE> [ARGS...]"; }

action="$1"
file="$2"
basename="${file##*/}"
file_ext="${basename##*.}"
task="${file_ext}_${action}"
shift 2

[ -e "$file" ] || err "$file: No such file or directory"


### BEGIN TASKS

c_compile() { make "${file%.c}"; }
c_run() { "$(realpath "${file%.c}")" "$@"; }
awk_run() { awk -f "$file" "$@"; }
html_lint() { tidy -q "$file" >/dev/null; }
html_run() { w3m "$file"; }
js_test() { node "$file"; }
md_run() { glow --pager --style dark "$file"; }
php_run() { php "$file" "$@"; }
sh_lint() { shellcheck -x "$file"; }
sh_run() { $(sed -n '1s|^#!/.*/\(.*\)|\1|p' "$file") "$file" "$@"; }
tex_compile() { pdflatex "$file"; }
zsh_run() { zsh "$file" "$@"; }
go_format() { gofmt -w "$file"; }
go_lint() { gofmt -d "$file"; }
go_compile() { go build "$file"; }
go_run() { "$(realpath "${file%.go}")" "$@"; }

c_test() {
	out="${file%.c}"
	# ARGS="$(sed -nE -e 's|.*#include\s*<(.*)>|-l\1|gp' "$file" |
	# 	paste -d' ' -s)"
	# echo "$ clang -o $out $file $ARGS"
	# clang -o "$out" "$file" $ARGS && "$out" "$@"
	make "$out" && echo && "$(realpath "$out")" "$@"
}

cpp_test() {
	out="$(realpath "${file%.cpp}")"
	if [ -f GNUmakefile ] || [ -f makefile ] || [ -f Makefile ]; then
		make && "${out%/*}/main" "$@"
	else
		g++ -o "$out" "$file" && "$out" "$@"
	fi
}

ino_test() {
	[ -t 1 ] || set -- --no-color
	if [ -c /dev/ttyACM0 ]; then
		arduino-cli compile --fqbn arduino:avr:uno "$file" "$@"
		arduino-cli upload --fqbn arduino:avr:uno --port /dev/ttyACM0 "$file" "$@"
		if [ -t 1 ]; then
			picocom /dev/ttyACM0
		else
			stty -F /dev/ttyACM0 raw 9600
			cat /dev/ttyACM0
		fi
	else
		arduino-cli compile --fqbn arduino:avr:uno --output-dir . "$file" "$@"
		rm -- *.eep *.elf *.bin *.with_bootloader.hex
	fi
}

java_test() {
	if [ -f build.xml ]; then
		ant
		build="$(find . -name 'classes' -or -name 'build' | tail -1)"
		class="$({ cd "$build" &&
			find . -name "$(basename "$file" .java).class"; } |
			tail -1 | cut -c 3- | sed 's|.class||g' | tr '/' '.')"
	else
		mkdir -pv build
		build="$(dirname "$file")/build"
		class="$(basename "$file" .java)"
		javac -d "$build" "$file"
	fi
	java -cp "$build:lib/*" "$class"
}

kt_test() {
	out="${file%.*}.jar"
	bash /opt/android-studio/plugins/Kotlin/kotlinc/bin/kotlinc "$file" -include-runtime -d "$out"
	java -jar "$out"
	rm "$out"
}

py_lint() {
	[ -t 1 ] && printf '\033[33m'
	pycodestyle "$file" >&2
	[ -t 1 ] && printf '\033[0;39m'
}

py_run() {
	if [ -x "$HOME/Applications/virtualenvs/main/bin/python" ]; then
		~/Applications/virtualenvs/main/bin/python "$file" "$@"
	else
		python "$file" "$@"
	fi
}

### END TASKS


tasks="$(sed -n "/^### BEGIN TASKS$/,/^### END TASKS$/ s/\(^[a-zA-Z0-9_]\+\)().*/[\1]/p" "$0")"
#TODO: Deal with file extension associations with file types separately
# Call the functions straight away during test action instead of recursively
# calling this script. Avoid creating additional intermediate subprocesses.

if [ "$action" = test ]; then
	[ "${tasks#*"[$task]"}" != "$tasks" ] && { $task; exit; }

	for act in lint compile run; do
		DEV_SUPRESS_ERRORS=1 dev "$act" "$file"; ret=$?
		[ "$ret" != 5 ] && {
			tasked=1
			[ "$ret" != 0 ] &&
				{ printf "\nshell returned %s\n\n" "$ret"; break; }
		}
	done

	[ "$tasked" != 1 ] && err "no tests for .$file_ext file"
	exit 0
fi

if [ "${basename#*.}" = "${basename}" ] || [ "${tasks#*"[$task]"}" = "$tasks" ]; then
	filetype=$(file --brief --mime-type "$file")
	case $filetype in
		text/x-c)               file_ext="c" ;;
		text/x-script.python)   file_ext="py" ;;
		text/x-shellscript)     file_ext="sh" ;;
		text/html)              file_ext="html" ;;
		application/javascript) file_ext="js" ;;
		text/x-php)             file_ext="php" ;;
		text/x-awk)             file_ext="awk" ;;
		*) err "no file type association for $filetype" ;;
	esac

	task="${file_ext}_${action}"
	[ "${tasks#*"[$task]"}" = "$tasks" ] &&
			err "no $action action for $filetype"
fi

$task
